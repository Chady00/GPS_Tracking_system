#include "tm4c123gh6pm.h"
#include <stdio.h>
#include "stdint.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>
#ifndef M_PI
#define M_PI 3.141592
#endif
#define DELAY_VALUE 10000
#define DELAY_VALUE_1 100000
void SysTick_Init(void){

  NVIC_ST_CTRL_R = 0;               // disable SysTick during setup

  NVIC_ST_CTRL_R = 0x00000005;      // enable SysTick with core clock

}

// The delay parameter is in units of the 80 MHz core clock. (12.5 ns)

void SysTick_Wait(unsigned long delay){

  NVIC_ST_RELOAD_R = delay-1;  // number of counts to wait

  NVIC_ST_CURRENT_R = 0;       // any value written to CURRENT clears

  while((NVIC_ST_CTRL_R&0x00010000)==0){ // wait for count flag

  }

}

// 800000*12.5ns equals 10ms

void SysTick_Wait10ms(unsigned long delay){

  unsigned long i;

  for(i=0; i<delay; i++){

    SysTick_Wait(800000);  // wait 10ms

  }

}
unsigned long j=0;
	// Delay function
void Delay(void){
    for (j=0; j<DELAY_VALUE ; j++);
}
void Delay_1(void){
    for (j=0; j<DELAY_VALUE_1 ; j++);
}
void LCD_DATA(char data)
{
	GPIO_PORTA_DATA_R=0x20;
	GPIO_PORTB_DATA_R=data;
	GPIO_PORTA_DATA_R|=0x80;
	Delay_1();
	GPIO_PORTA_DATA_R=0;
	
}
void UART1_Init(void){
  SYSCTL_RCGCUART_R |= 0x00000002;  // activate UART1

  SYSCTL_RCGCGPIO_R |= 0x00000004;  // activate port C

  UART1_CTL_R &= ~0x00000001;    // disable UART

  UART1_IBRD_R = 104;     // IBRD = int(80,000,000/(16*115,200)) = int(43.40278)

  UART1_FBRD_R = 11;     // FBRD = round(0.40278 * 64) = 26

  UART1_LCRH_R = 0x00000070;  // 8 bit, no parity bits, one stop, FIFOs

  UART1_CTL_R |= (UART_CTL_UARTEN|UART_CTL_RXE|UART_CTL_TXE);     // enable UART

  GPIO_PORTC_AFSEL_R |= 0x30;    // enable alt funct on PC5-4

  GPIO_PORTC_DEN_R |= 0x30;      // configure PC5-4 as UART1

  GPIO_PORTC_PCTL_R = (GPIO_PORTC_PCTL_R&0xFF00FFFF)+0x00220000;

  GPIO_PORTC_AMSEL_R &= ~0x30;   // disable analog on PC5-4
}

void UART1_FIFO_FULL(char data){
while((UART1_FR_R&0x0080)==0);
    UART1_DR_R= data ;
}
char UART1_InChar(void){
    while((UART1_FR_R &0x10) !=0);
    return(char) (UART1_DR_R & 0XFF);
}
void prstr(char *str){
	while(*str){
		UART1_FIFO_FULL(*str);
		str++;
	}
}
void get_Command(char *Command, int lenmax){
	char character;
	int i;
	for (i=0;i<lenmax;i++){
		
		character= UART1_InChar();
		Command[i]= character;
		UART1_FIFO_FULL(Command[i]);
	}
}
//LCD COMMAND
void LCD_command(char command)
{
	GPIO_PORTA_DATA_R=0;
	GPIO_PORTB_DATA_R=command;
	GPIO_PORTA_DATA_R|=0x80;
	Delay_1();
	GPIO_PORTA_DATA_R=0;
	
}
//initialization function
void init (void)
{ 
  SYSCTL_RCGCGPIO_R|=0X03;
  GPIO_PORTB_DIR_R=0xFF;
  GPIO_PORTB_DEN_R=0xFF;
  GPIO_PORTA_DIR_R=0xE0;
  GPIO_PORTA_DEN_R=0xE0;
  GPIO_PORTA_AFSEL_R=0x00;
  GPIO_PORTB_AFSEL_R=0x00;
  GPIO_PORTA_AMSEL_R=0x00;
  GPIO_PORTB_AMSEL_R=0x00;
  GPIO_PORTA_PCTL_R=0x00;
  GPIO_PORTB_PCTL_R=0x00;
  LCD_command(0x30);	      //wake up
	
  LCD_command(0x38);         //8 bits for display
  LCD_command(0x06);         //shift
  LCD_command(0x01);         //clear
  LCD_command(0x0F);         //display on
  }
// function to get distance from GPS module 
    double getdistance(double lat_1,double long_1,double lat_2,double long_2)
    {
    double R = 6373.0 ;
    double distance = 0 ;
    double d_lat = (lat_2 - lat_1)*M_PI/180.0;
    double d_long = (long_2 - long_1)*M_PI/180.0 ;
    double a = pow(sin(d_lat/2),2)  +  cos(lat_1*M_PI/180.0) * cos(lat_2*M_PI/180.0) * pow(sin(d_long / 2),2) ;
    double c = 2 * atan2(sqrt(a),sqrt(1 - a));
    distance = R * c* 1000 ;
    // printf("%.10f\n", a);
    // printf("%.10f\n", c);
    // printf("%.10f\n", distance);

    return distance;
    } 
		

// An indicator function which switch is on or off.
unsigned char SW1_SW2_input(void){
	return GPIO_PORTF_DATA_R & 0x11;
	}
// function to get the LED on.
void RG_out(unsigned char data){
	GPIO_PORTF_DATA_R &=~ 0x0E;
	GPIO_PORTF_DATA_R|=data;

}
// intialization for LEDs.
void init_LEDs(void){
	//SYSCTL_RCGCGPIO_R |=0x20;
	//while((SYSCTL_PRGPIO_R & 0x20)==0);
	GPIO_PORTF_LOCK_R = 0x4C4F434B ;
	GPIO_PORTF_CR_R |= 0x0E;
	GPIO_PORTF_AMSEL_R &= ~ 0x0E;
	GPIO_PORTF_PCTL_R &= ~0x0000FFF0;
	GPIO_PORTF_AFSEL_R &=~ 0x0E;
	GPIO_PORTF_DIR_R |= 0x0E;
	GPIO_PORTF_DEN_R|= 0x0E;
	GPIO_PORTF_PUR_R |= 0x0E;
	GPIO_PORTF_DATA_R &= ~0x0E;
}
// initialization for switches.
void init_SW1_SW2( void){
	//initializing PORT F 
	SYSCTL_RCGCGPIO_R |=0x20;
	while((SYSCTL_PRGPIO_R & 0x20)==0)
	GPIO_PORTF_LOCK_R = 0x4C4F434B ;
	GPIO_PORTF_CR_R |= 0x0E;	
	GPIO_PORTF_AMSEL_R &= ~ 0x11;
	GPIO_PORTF_PCTL_R &= ~0x000F0000;
	GPIO_PORTF_AFSEL_R &=~0x11;
	GPIO_PORTF_DIR_R &= ~0x11;
	GPIO_PORTF_DEN_R|=0x11;
	GPIO_PORTF_PUR_R |= 0x11;}

	// Port A initization.
void Port_A_init(void){
SYSCTL_RCGCGPIO_R |= (0x01) ;
while((SYSCTL_PRGPIO_R & 0x01)==0)
GPIO_PORTA_AMSEL_R &= ~ 0x04;
GPIO_PORTA_PCTL_R &= ~0x00000F00;
GPIO_PORTA_AFSEL_R &=~0x04;
GPIO_PORTA_DIR_R |= 0x04 ;
GPIO_PORTA_DEN_R |= 0x04 ;
}
unsigned char btn;
unsigned char LED_out;
int i=0;
double total_distance=0;
double lat_1;
double lat_2;
double long_1;
double long_2;
double distance;
char text[40];
char text_1[20];
int main ( void )
{int i;
int j=0;
int j_1;
double longitude;
double latitude;
const int len=100;
char command[len]={0};
char lon[10]={0};
char lat[10]={0};
char *eptr;
UART1_Init();
SysTick_Init();
init();
init_SW1_SW2();
init_LEDs();
Port_A_init();
// Loop forever . 
while(1){

//	total_distance+=distance;
		get_Command(command,len);

//longitude=strtod(command,&eptr);
//latitude=strtod(command,&eptr);
for(i=0;i<len;i++){
text[i]=command[i];
}
	//sprintf(text,"%f",longitude);
//sprintf(text_1,"%f",latitude);	
LCD_command(1);
//LCD_command(0x80);
//LCD_DATA('d');
//LCD_DATA('i');
//LCD_DATA('s');
//LCD_DATA('t');
//LCD_DATA('a');
//LCD_DATA('n');
//LCD_DATA('c');
//LCD_DATA('e');
//LCD_DATA('=');	
LCD_DATA(text[0]);
LCD_DATA(text[1]);
LCD_DATA(text[2]);
LCD_DATA(text[3]);
LCD_DATA(text[4]);
LCD_DATA(text[5]);
LCD_DATA(text[6]);
LCD_DATA(text[7]);
LCD_DATA(text[8]);
LCD_DATA(text[9]);
LCD_DATA(text[10]);
LCD_DATA(text[11]);
LCD_DATA(text[12]);
LCD_DATA(text[13]);
LCD_DATA(text[14]);
LCD_DATA(text[15]);
LCD_command(0xC0);
//LCD_DATA('t');
//LCD_DATA('o');
//LCD_DATA('t');
//LCD_DATA('=');
LCD_DATA(text[16]);
LCD_DATA(text[17]);
LCD_DATA(text[18]);
LCD_DATA(text[20]);
LCD_DATA(text[21]);
LCD_DATA(text[22]);
LCD_DATA(text[23]);
LCD_DATA(text[24]);
LCD_DATA(text[25]);
LCD_DATA(text[26]);
LCD_DATA(text[27]);
LCD_DATA(text[28]);
LCD_DATA(text[29]);
LCD_DATA(text[30]);
LCD_DATA(text[31]);
LCD_DATA(text[32]);

memset(command,0,len);
	}}
